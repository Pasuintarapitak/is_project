from pyexpat import model

from sklearn.metrics import classification_report, confusion_matrix
import streamlit as st

import random
import pandas as pd

from streamlit_option_menu import option_menu
from model_handler import predict  # ‡∏î‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå


st.set_page_config(page_title="My App", page_icon="üåü", layout="wide")
nsafe_allow_html=True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Navbar ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
selected = option_menu(
    menu_title=None,  
    options=["Machine Learning Documentation", "Neural Network Documentation"],  
    icons=["info-circle", "info-circle"],  
    menu_icon="cast",  
    default_index=0,  
    orientation="horizontal",
)


if selected == "Machine Learning Documentation":
    # st.title()
   
    #Header
    st.title(":orange[Cancer] Prediction Model  :sunglasses:")
    st.write("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á")

    #Dataset
    df = pd.read_csv("Dataset/cancer_dataset.csv")
    st.dataframe(df)
    st.markdown("***‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏û‡∏® bmi ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏ß‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á***")
    st.markdown("***Raw Dateset : https://www.kaggle.com/datasets/rabieelkharoua/cancer-prediction-dataset/data***")
   
    #Feature
    st.subheader("Features Explanation:", divider="red")
    feature = pd.DataFrame(
    {
        "Features": ["Age", "Gender","BMI","GeneticRisk","PhysicalActivity",
                         "AlcoholIntake","CancerHistory","Diagnosis"],
        "Meaning": ["‡∏≠‡∏≤‡∏¢‡∏∏   ( ‡∏ä‡πà‡∏ß‡∏á 20 - 80 ‡∏õ‡∏µ )", 
                    "‡πÄ‡∏û‡∏® :  Male(‡∏ä‡∏≤‡∏¢)  ,  Female(‡∏´‡∏ç‡∏¥‡∏á)",
                    "‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢    (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)",
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏∞‡∏î‡∏±‡∏ö: (  ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ ,‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏≤‡∏á ,‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á  )",
                    "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á  (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
                    "‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå  (‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)",
                    "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á",
                    "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (Outputs)"],

    }
    )
    # st.dataframe(feature, height=300, width=600, use_container_width=True)
    feature = feature.reset_index(drop=True) 
    st.dataframe(feature,height=320, width=1200)


    #prepare data
    st.title(":red[Prepare] dataset")

    st.write("1. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á dataset ‡∏à‡∏≤‡∏Å ‡πÑ‡∏ü‡∏•‡πå .csv")
    code = '''
        data = pd. read_csv("/content/cancer_dataset.csv") 
    '''
    st.code(code, language="python")


    st.write("2. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ NULL ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
    code = '''
        #Drop data which row has null
        data = data.dropna()
        
        #Convert data type to number for evaluation
        data['Gender'] = data['Gender'].map({'Female': 1, 'Male': 0})
        data['Smoking'] = data['Smoking'].map({'No': 0, 'Yes': 1})
        data['GeneticRisk'] = data['GeneticRisk'].map({'indicating Low': 0, 'indicating Medium': 1 , 'indicating High':2})
        data['CancerHistory'] = data['CancerHistory'].map({'No': 0, 'Yes': 1})
        data['Diagnosis'] = data['Diagnosis'].map({'Negative': 0, 'Positive': 1})
    '''
    st.code(code, language="python")

    st.write("4. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    df = df.dropna()
    df['Gender'] = df['Gender'].map({'Female': 1, 'Male': 0})
    df['Smoking'] = df['Smoking'].map({'No': 0, 'Yes': 1})
    df['GeneticRisk'] = df['GeneticRisk'].map({'indicating Low': 0, 'indicating Medium': 1 , 'indicating High':2})
    df['CancerHistory'] = df['CancerHistory'].map({'No': 0, 'Yes': 1})
    df['Diagnosis'] = df['Diagnosis'].map({'Negative': 0, 'Positive': 1})
    st.dataframe(df)



    st.write("5. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å Feature ‡πÅ‡∏•‡∏∞ Target ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Train sets ‡πÅ‡∏•‡∏∞ Test sets ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ")
    code = '''
        #Separate Features and Target
        X = data.drop('Diagnosis', axis=1)  # Features
        y = data['Diagnosis']  # Target

        # Separate Train sets (80 %) and Test sets (20 %) 
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    '''
    st.code(code, language="python")


   


    
    #Train alogorithm
    st.title(":red[Traning] and :orange[Testing]")

    st.subheader("**Algorithm**üéØ")
    st.markdown("""
                1. Random Forest : ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Decision Tree ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î Ensemble Learning ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                2. SVM (Support Vector Machine) : ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Classification) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ (Regression) ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              
    """)
    st.subheader("**Random Tree**üéØ",divider=True)
    st.write("1. ‡∏Å‡∏≤‡∏£ train Model ‡∏î‡πâ‡∏ß‡∏¢ Random Tree")
    code = '''
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Tree
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
    '''
    st.code(code, language="python")
    st.write("2. ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ó‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    
    code = '''
        from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
     
        y_pred = model.predict(X_test)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
        accuracy = accuracy_score(y_test, y_pred)

        #  Classification Report
        report = (classification_report(y_test, y_pred))

        #  Confusion Matrix
        martirx = (confusion_matrix(y_test, y_pred))

    '''
    st.code(code, language="python")

    #SVM train
    st.subheader("SVM (Support Vector Machine)üéØ",divider=True)

    st.write("1. ‡∏Å‡∏≤‡∏£ train Model ‡∏î‡πâ‡∏ß‡∏¢ SVM")
    
    code = '''
        from sklearn.svm import SVC

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• SVM
        modelSVM = SVC(kernel='poly', probability=True)  
        modelSVM.fit(X_train, y_train)

    '''
    st.code(code, language="python")
    st.markdown("""
        *‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏à‡∏∂‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Normalization*
              
    """)
    
    st.write("2. ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ó‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    
    code = '''
        from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
    
        y_pred = model.predict(X_test)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
        accuracy = accuracy_score(y_test, y_pred)

        #  Classification Report
        report = (classification_report(y_test, y_pred))

        #  Confusion Matrix
        martirx = (confusion_matrix(y_test, y_pred))

    '''
    st.code(code, language="python")


   
    








elif selected == "Neural Network Documentation":
    st.title("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö")
    st.write("‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Streamlit ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤")





